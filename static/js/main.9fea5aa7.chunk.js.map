{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","resetState","board","state","winner","disabled","setState","player_turn","winner_messages","message1","index","this","found","find","element","winning_combos","i","length","winning_row","p1","p2","p3","push","alert","assignedClass","className","map","square","x","console","log","onClick","squareClicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9fea5aa7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      board: [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n      player_turn: \"X\",\n      disabled: false,\n      winner: [],\n      winner_messages: {\n        message1: \"Welcome\",\n      },\n    };\n  }\n  squareClicked(index) {\n    let player_turn = this.state.player_turn;\n    let board = this.state.board;\n    let disabled = this.state.disabled;\n    let winner = this.state.winner;\n\n    const found = board.find((element) => element === \" \");\n\n    if (disabled === false && found !== \" \") {\n      alert(`Draw click Reset form a new game`);\n      return;\n    }\n\n    if (board[index] !== \" \") {\n      if (disabled === true) {\n        player_turn = player_turn === \"X\" ? \"O\" : \"X\";\n        alert(\n          `player ${player_turn} has won the game , Click Reset for a new Game:)`\n        );\n      }\n      return;\n    } else {\n      if (disabled === false) {\n        board[index] = player_turn;\n\n        let winning_combos = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n\n        for (let i = 0; i < winning_combos.length; i++) {\n          let winning_row = winning_combos[i];\n          let p1 = winning_row[0];\n          let p2 = winning_row[1];\n          let p3 = winning_row[2];\n          if (\n            board[p1] !== \" \" &&\n            board[p1] === board[p2] &&\n            board[p2] === board[p3] &&\n            board[p3] === board[p1]\n          ) {\n            disabled = true;\n            winner.push(p1, p2, p3);\n            alert(`player ${player_turn} has won the game`);\n          }\n        }\n        player_turn = player_turn === \"X\" ? \"O\" : \"X\";\n        this.setState({\n          player_turn: player_turn,\n          board: board,\n          disabled: disabled,\n          winner: winner,\n        });\n      } else {\n        player_turn = player_turn === \"X\" ? \"O\" : \"X\";\n        alert(\n          `player ${player_turn} has won the game , Click Reset for a new Game:)`\n        );\n      }\n    }\n  }\n\n  resetState = () => {\n    let board = this.state.board;\n    let disabled = this.state.disabled;\n    let winner = this.state.winner;\n    winner = [];\n    board = [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"];\n    disabled = false;\n    this.setState({\n      board: board,\n      disabled: disabled,\n      winner: winner,\n    });\n  };\n\n  render() {\n    let assignedClass = \"heading\";\n    return (\n      <div className=\"App\">\n        <div className=\"nav\"> Tic Tac Toe</div>\n        <div className=\"top\">\n          <h3>Turn : {this.state.player_turn}</h3>\n          <h3>{this.state.winner_messages.message1}</h3>\n        </div>\n        <div className=\"board\">\n          {this.state.board.map((square, index) => {\n            assignedClass = \"heading\";\n            let x = this.state.winner.find((element) => element === index);\n            if (x >= 0) {\n              console.log(x);\n              assignedClass = \"heading2\";\n            }\n\n            return (\n              <div\n                onClick={() => {\n                  this.squareClicked(index);\n                }}\n                className=\"square\"\n              >\n                <h1 className={assignedClass}>{square}</h1>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"btnarea\">\n          <button className=\"reset\" onClick={this.resetState}>\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}